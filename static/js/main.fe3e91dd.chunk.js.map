{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","borderBottom","background","padding","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","deleteItem","Component","Todos","todos","map","index","key","headerStyle","color","textAlign","Header","to","className","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","placeholder","flex","About","Fragment","App","fetch","method","then","res","filter","headers","Accept","body","JSON","stringify","json","newTodo","catch","err","console","log","response","data","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe3e91dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoItem extends Component {\r\n\tgetStyle = () => {\r\n\t\treturn {\r\n\t\t\tborderBottom: '1px #ccc dotted',\r\n\t\t\tbackground: '#f4f4f4',\r\n\t\t\tpadding: '10px',\r\n\t\t\ttextDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n\t\t};\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { id, title } = this.props.todo;\r\n\t\treturn (\r\n\t\t\t<div style={this.getStyle()}>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {title}\r\n\t\t\t\t\t<button onClick={this.props.deleteItem.bind(this, id)}>X</button>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nTodoItem.propTypes = {\r\n\ttodo: PropTypes.object.isRequired\r\n};\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass Todos extends Component {\r\n\trender() {\r\n\t\treturn this.props.todos.map((todo, index) => (\r\n\t\t\t<TodoItem\r\n\t\t\t\tkey={index}\r\n\t\t\t\ttodo={todo}\r\n\t\t\t\tmarkComplete={this.props.markComplete}\r\n\t\t\t\tdeleteItem={this.props.deleteItem}\r\n\t\t\t/>\r\n\t\t));\r\n\t}\r\n}\r\n\r\nTodos.propTypes = {\r\n\ttodos: PropTypes.array.isRequired\r\n};\r\nexport default Todos;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<header style={headerStyle}>\r\n\t\t\t<h1>TodoList</h1>\r\n\t\t\t<Link to=\"/\" className=\"link\">\r\n\t\t\t\tHome\r\n\t\t\t</Link>{' '}\r\n\t\t\t|{' '}\r\n\t\t\t<Link className=\"link\" to=\"/About\">\r\n\t\t\t\tAbout\r\n\t\t\t</Link>\r\n\t\t</header>\r\n\t);\r\n};\r\nconst headerStyle = {\r\n\tcolor: '#fff',\r\n\tbackground: '#333',\r\n\ttextAlign: 'center',\r\n\tpadding: '10px'\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass AddTodo extends Component {\r\n\tstate = {\r\n\t\ttitle: ''\r\n\t};\r\n\tonSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.props.addTodo(this.state.title);\r\n\t\tthis.setState({ title: '' });\r\n\t};\r\n\tonChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\tvalue={this.state.title}\r\n\t\t\t\t\tplaceholder=\"Add Todo ...\"\r\n\t\t\t\t\tstyle={{ flex: '10', padding: '5px' }}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<input className=\"btn\" type=\"submit\" value=\"Submit\" style={{ flex: '1' }} />\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\r\nconst About = () => {\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<h1>About</h1>\r\n\t\t\t<p>This is my first react project...Eager to be a Pro</p>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default About;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/About';\n\nimport './App.css';\n\nclass App extends Component {\n\tstate = {\n\t\ttodos: []\n\t};\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/todos?_limit=6')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttodos: data\n\t\t\t\t});\n\t\t\t});\n\t}\n\tmarkComplete = (id) => {\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos.map((todo) => {\n\t\t\t\tif (todo.id === id) {\n\t\t\t\t\ttodo.completed = !todo.completed;\n\t\t\t\t}\n\t\t\t\treturn todo;\n\t\t\t})\n\t\t});\n\t};\n\tdeleteItem = (id) => {\n\t\tfetch(`https://jsonplaceholder.typicode.com/todos/${id}`, {\n\t\t\tmethod: 'DELETE'\n\t\t}).then((res) =>\n\t\t\tthis.setState({\n\t\t\t\ttodos: this.state.todos.filter((todo) => todo.id !== id)\n\t\t\t})\n\t\t);\n\t};\n\n\taddTodo = (title) => {\n\t\tfetch('https://jsonplaceholder.typicode.com/todos', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\ttitle,\n\t\t\t\tcompleted: false\n\t\t\t})\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((newTodo) => {\n\t\t\t\tthis.setState({ todos: [ ...this.state.todos, newTodo ] });\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log('Could not post todo to jsonplaceholder');\n\t\t\t});\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\tpath=\"/\"\n\t\t\t\t\t\t\trender={(props) => (\n\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t<AddTodo addTodo={this.addTodo} />\n\t\t\t\t\t\t\t\t\t<Todos\n\t\t\t\t\t\t\t\t\t\ttodos={this.state.todos}\n\t\t\t\t\t\t\t\t\t\tmarkComplete={this.markComplete}\n\t\t\t\t\t\t\t\t\t\tdeleteItem={this.deleteItem}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Route path=\"/about\" component={About} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}